<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>java NestedClass 内部嵌套类</title>
    <url>/posts/c80f36c0/</url>
    <content><![CDATA[<h1 id="nestedClass-嵌套类"><a href="#nestedClass-嵌套类" class="headerlink" title="nestedClass 嵌套类"></a>nestedClass 嵌套类</h1><p><strong><a href="https://docs.oracle.com/javase/tutorial/java/javaOO/nested.html" target="_blank" rel="noopener">Oracle 官方说明</a></strong></p>
<p><strong><a href="https://www.runoob.com/w3cnote/java-inner-class-intro.html" target="_blank" rel="noopener">runNoob 中文教程</a></strong></p>
<p>oracle 文档<br><img src="/images/nestedClass.PNG" alt=""></p>
<p>但是再runnoob中 是直接叙述为四种 成员内部类，内部静态类，局部内部类，匿名内部类。</p>
<p>详细内容可查询runNoob和oracle的说明。但是笔者遇到的问题会在后期继续更新。</p>
<a id="more"></a>

<h3 id="问题1-静态内部类的初始化问题。"><a href="#问题1-静态内部类的初始化问题。" class="headerlink" title="问题1 静态内部类的初始化问题。"></a>问题1 静态内部类的初始化问题。</h3><blockquote>
<p>来源: 单例模式中的静态内部类。在这种模式下，仍然是延迟加载的。说明静态内部类的加载方式有别于static变量。<br>详见<a href="https://blog.csdn.net/mnb65482/article/details/80458571" target="_blank" rel="noopener">深入理解单例模式：静态内部类单例原理</a></p>
</blockquote>
<h4 id="如何保证静态内部类单例模式的线程安全"><a href="#如何保证静态内部类单例模式的线程安全" class="headerlink" title="如何保证静态内部类单例模式的线程安全"></a>如何保证静态内部类单例模式的线程安全</h4><p>&emsp;&emsp;回答内容均摘自上面文章。<br>&emsp;&emsp;我们再回头看下getInstance()方法，调用的是SingleTonHoler.INSTANCE，取的是SingleTonHoler里的INSTANCE对象，跟上面那个DCL方法不同的是，getInstance()方法并没有多次去new对象，故不管多少个线程去调用getInstance()方法，取的都是同一个INSTANCE对象，而不用去重新创建。当getInstance()方法被调用时，SingleTonHoler才在SingleTon的运行时常量池里，把符号引用替换为直接引用，这时静态对象INSTANCE也真正被创建，然后再被getInstance()方法返回出去，这点同饿汉模式。那么INSTANCE在创建过程中又是如何保证线程安全的呢？在《深入理解JAVA虚拟机》中，有这么一句话:<br>&emsp;&emsp;虚拟机会保证一个类的<clinit>()方法在多线程环境中被正确地加锁、同步，如果多个线程同时去初始化一个类，那么只会有一个线程去执行这个类的<clinit>()方法，其他线程都需要阻塞等待，直到活动线程执行<clinit>()方法完毕。如果在一个类的<clinit>()方法中有耗时很长的操作，就可能造成多个进程阻塞(需要注意的是，其他线程虽然会被阻塞，但如果执行<clinit>()方法后，其他线程唤醒之后不会再次进入<clinit>()方法。同一个加载器下，一个类型只会初始化一次。)，在实际应用中，这种阻塞往往是很隐蔽的。</p>
<p>&emsp;&emsp;故而，可以看出INSTANCE在创建过程中是线程安全的，所以说静态内部类形式的单例可保证线程安全，也能保证单例的唯一性，同时也延迟了单例的实例化。</p>
<p>&emsp;&emsp;那么，是不是可以说静态内部类单例就是最完美的单例模式了呢？其实不然，静态内部类也有着一个致命的缺点，就是传参的问题，由于是静态内部类的形式去创建单例的，故外部无法传递参数进去，例如Context这种参数，所以，我们创建单例时，可以在静态内部类与DCL模式里自己斟酌。</p>
<hr>
<p><strong>待续</strong></p>
<hr>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>内部嵌套类</tag>
      </tags>
  </entry>
  <entry>
    <title>算法学习日常打勾</title>
    <url>/posts/98497c25/</url>
    <content><![CDATA[<h1 id="算法学习"><a href="#算法学习" class="headerlink" title="算法学习"></a>算法学习</h1><p>每日督促，之前学了很多但是不够系统</p>
<p><a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener">手把手撕LeetCode题目，扒各种算法套路的裤子</a><br>笔者在阅读这个仓库，如有侵删</p>
<a id="more"></a>
<h2 id="第零章、必读系列"><a href="#第零章、必读系列" class="headerlink" title="第零章、必读系列"></a>第零章、必读系列</h2><ul>
<li><input checked="" disabled="" type="checkbox"> 学习算法和刷题的框架思维</li>
<li><input checked="" disabled="" type="checkbox"> 学习数据结构和算法读什么</li>
<li><input disabled="" type="checkbox"> 动态规划解题框架</li>
<li><input disabled="" type="checkbox"> 动态规划答疑篇</li>
<li><input disabled="" type="checkbox"> 回溯算法解题框架</li>
<li><input checked="" disabled="" type="checkbox"> 二分查找解题框架</li>
<li><input checked="" disabled="" type="checkbox"> 滑动窗口解题框架</li>
<li><input checked="" disabled="" type="checkbox"> 双指针技巧解题框架</li>
<li><input disabled="" type="checkbox"> Linux的进程、线程、文件描述符是什么</li>
<li><input disabled="" type="checkbox"> Git/SQL/正则表达式的在线练习平台<h2 id="第一章、动态规划系列"><a href="#第一章、动态规划系列" class="headerlink" title="第一章、动态规划系列"></a>第一章、动态规划系列</h2></li>
<li><input disabled="" type="checkbox"> 动态规划详解</li>
<li><input disabled="" type="checkbox"> 动态规划答疑篇</li>
<li><input disabled="" type="checkbox"> 动态规划设计：最长递增子序列</li>
<li><input disabled="" type="checkbox"> 编辑距离</li>
<li><input disabled="" type="checkbox"> 经典动态规划问题：高楼扔鸡蛋</li>
<li><input disabled="" type="checkbox"> 经典动态规划问题：高楼扔鸡蛋（进阶）</li>
<li><input disabled="" type="checkbox"> 动态规划之子序列问题解题模板</li>
<li><input disabled="" type="checkbox"> 动态规划之博弈问题</li>
<li><input disabled="" type="checkbox"> 贪心算法之区间调度问题</li>
<li><input disabled="" type="checkbox"> 动态规划之KMP字符匹配算法</li>
<li><input disabled="" type="checkbox"> 团灭 LeetCode 股票买卖问题</li>
<li><input disabled="" type="checkbox"> 团灭 LeetCode 打家劫舍问题</li>
<li><input disabled="" type="checkbox"> 动态规划之四键键盘</li>
<li><input disabled="" type="checkbox"> 动态规划之正则表达</li>
<li><input disabled="" type="checkbox"> 最长公共子序列<h2 id="第二章、数据结构系列"><a href="#第二章、数据结构系列" class="headerlink" title="第二章、数据结构系列"></a>第二章、数据结构系列</h2></li>
<li><input checked="" disabled="" type="checkbox"> 学习算法和刷题的思路指南</li>
<li><input checked="" disabled="" type="checkbox"> 学习数据结构和算法读什么书</li>
<li><input disabled="" type="checkbox"> 二叉堆详解实现优先级队列</li>
<li><input disabled="" type="checkbox"> LRU算法详解</li>
<li><input disabled="" type="checkbox"> 二叉搜索树操作集锦</li>
<li><input checked="" disabled="" type="checkbox"> 3/7 特殊数据结构：单调栈</li>
<li><input disabled="" type="checkbox"> 特殊数据结构：单调队列</li>
<li><input disabled="" type="checkbox"> 设计Twitter</li>
<li><input disabled="" type="checkbox"> 递归反转链表的一部分</li>
<li><input disabled="" type="checkbox"> 队列实现栈|栈实现队列<h2 id="第三章、算法思维系列"><a href="#第三章、算法思维系列" class="headerlink" title="第三章、算法思维系列"></a>第三章、算法思维系列</h2></li>
<li><input disabled="" type="checkbox"> 算法学习之路</li>
<li><input disabled="" type="checkbox"> 回溯算法详解</li>
<li><input disabled="" type="checkbox"> 回溯算法团灭排列、组合、子集问题</li>
<li><input disabled="" type="checkbox"> 二分查找详解</li>
<li><input disabled="" type="checkbox"> 双指针技巧总结</li>
<li><input disabled="" type="checkbox"> 滑动窗口技巧</li>
<li><input disabled="" type="checkbox"> twoSum问题的核心思想</li>
<li><input disabled="" type="checkbox"> 常用的位操作</li>
<li><input disabled="" type="checkbox"> 拆解复杂问题：实现计算器</li>
<li><input disabled="" type="checkbox"> 烧饼排序</li>
<li><input disabled="" type="checkbox"> 前缀和技巧</li>
<li><input disabled="" type="checkbox"> 字符串乘法</li>
<li><input disabled="" type="checkbox"> FloodFill算法详解及应用</li>
<li><input disabled="" type="checkbox"> 区间调度之区间合并问题</li>
<li><input disabled="" type="checkbox"> 区间调度之区间交集问题</li>
<li><input disabled="" type="checkbox"> 信封嵌套问题</li>
<li><input disabled="" type="checkbox"> 几个反直觉的概率问题</li>
<li><input disabled="" type="checkbox"> 洗牌算法</li>
<li><input disabled="" type="checkbox"> 递归详解<h2 id="第四章、高频面试系列"><a href="#第四章、高频面试系列" class="headerlink" title="第四章、高频面试系列"></a>第四章、高频面试系列</h2></li>
<li><input disabled="" type="checkbox"> 如何实现LRU算法</li>
<li><input disabled="" type="checkbox"> 如何高效寻找素数</li>
<li><input disabled="" type="checkbox"> 如何计算编辑距离</li>
<li><input disabled="" type="checkbox"> 如何运用二分查找算法</li>
<li><input disabled="" type="checkbox"> 如何高效解决接雨水问题</li>
<li><input disabled="" type="checkbox"> 如何去除有序数组的重复元素</li>
<li><input disabled="" type="checkbox"> 如何寻找最长回文子串</li>
<li><input disabled="" type="checkbox"> 如何k个一组反转链表</li>
<li><input disabled="" type="checkbox"> 如何判定括号合法性</li>
<li><input disabled="" type="checkbox"> 如何寻找消失的元素</li>
<li><input disabled="" type="checkbox"> 如何寻找缺失和重复的元素</li>
<li><input disabled="" type="checkbox"> 如何判断回文链表</li>
<li><input disabled="" type="checkbox"> 如何在无限序列中随机抽取元素</li>
<li><input disabled="" type="checkbox"> 如何调度考生的座位</li>
<li><input disabled="" type="checkbox"> Union-Find算法详解</li>
<li><input disabled="" type="checkbox"> Union-Find算法应用</li>
<li><input disabled="" type="checkbox"> 一行代码就能解决的算法题</li>
<li><input disabled="" type="checkbox"> 二分查找高效判定子序列<h2 id="第五章、计算机技术"><a href="#第五章、计算机技术" class="headerlink" title="第五章、计算机技术"></a>第五章、计算机技术</h2></li>
<li><input disabled="" type="checkbox"> Linux的进程、线程、文件描述符是什么</li>
<li><input disabled="" type="checkbox"> 一文看懂 session 和 cookie</li>
<li><input disabled="" type="checkbox"> 关于 Linux shell 你必须知道的</li>
<li><input disabled="" type="checkbox"> 加密算法的前身今世</li>
<li><input disabled="" type="checkbox"> Git/SQL/正则表达式的在线练习平台</li>
</ul>
]]></content>
      <categories>
        <category>算法</category>
      </categories>
      <tags>
        <tag>学习汇总</tag>
      </tags>
  </entry>
  <entry>
    <title>谁动了我的奶酪</title>
    <url>/posts/40998eb9/</url>
    <content><![CDATA[<h1 id="读书日记-谁动了我的奶酪"><a href="#读书日记-谁动了我的奶酪" class="headerlink" title="读书日记 谁动了我的奶酪"></a>读书日记 谁动了我的奶酪</h1><h2 id="警示"><a href="#警示" class="headerlink" title="警示"></a>警示</h2><ol>
<li>注意变化</li>
<li>注意变化</li>
<li>注意变化</li>
<li>拥抱变化</li>
<li>拥抱变化</li>
<li>拥抱变化<a id="more"></a></li>
<li>措施</li>
<li>措施</li>
<li>措施<br>内心的不甘又开始了…<br>do it.Fuck the fucking world<h2 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h2></li>
<li>写奶酪日记<blockquote>
<p>日记格式<br>问题:<br>列举解决方案(像巫师3一样)</p>
</blockquote>
</li>
<li>做出最快最积极的措施，去拥抱变化</li>
<li>记录奶酪变化变质。</li>
</ol>
]]></content>
      <categories>
        <category>读书日记</category>
      </categories>
  </entry>
  <entry>
    <title>Hexo图片测试</title>
    <url>/posts/b16545e0/</url>
    <content><![CDATA[<h1 id="hexo-图片测试"><a href="#hexo-图片测试" class="headerlink" title="hexo 图片测试"></a>hexo 图片测试</h1><p>&emsp;&emsp;因为个人的习惯，自己写文档的时候，喜欢把当前文件夹下的所有文档种包含的图片，都存储在当前文件夹下的.images文件夹中。<br>&emsp;&emsp;但是hexo并没有提供这种方式。如下是hexo官方写的两种方式，有兴趣的可以直接查看官网 <a href="https://hexo.io/zh-cn/docs/asset-folders" target="_blank" rel="noopener">hexo资源文件夹</a>.</p>
<a id="more"></a>

<h2 id="1-放置source-images"><a href="#1-放置source-images" class="headerlink" title="1.放置source/images"></a>1.放置source/images</h2><p>&emsp;&emsp;这也是笔者采用的方式。将资源文件放在/source/images，在利用markdown的相对路径去获取。</p>
<h2 id="2-插件方法"><a href="#2-插件方法" class="headerlink" title="2.插件方法"></a>2.插件方法</h2><p><a href="https://blog.csdn.net/Fitz1318/article/details/86548129" target="_blank" rel="noopener">Hexo文章中插入图片的方法</a></p>
<p>但是我对这种方法有一个疑惑，即在自己写的时候是不是因为路径的问题看不到，没去测试，而且笔者更喜欢上面那种管理方式。<br>原因也比较简单.只要设置 vscode 插件paste images 将 图片途径改为跟目录的images就通用了。平时写作改一下习惯就可以了。<br>但是产生时候是 (../images/imgfilename)。虽然在vscode里面 (/images/) 和 (../images/)都可以预览。估计 (/images/) 是作为工作区的根目录下的images去寻找的(未考证)。<br>所以，如果是要发布的文章只要将 (../images/) 改为  (/images/) 。如果是自己的文章就不用改了，相对路径的话，适用于各种软件。之前的typora也是这样的。</p>
<p>官方给了一个函数 可以控制width 和 high,下次需要的时候尝试吧。</p>
<p><img src="/images/img2020-01-07-21-00-50.png" alt=""></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>tryHexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/posts/4a17b156/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure>
<a id="more"></a>

<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>My New Post</title>
    <url>/posts/177574ba/</url>
    <content><![CDATA[<h1 id="newPost"><a href="#newPost" class="headerlink" title="newPost"></a>newPost</h1><pre><code>welcome !!</code></pre>]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>tryHexo</tag>
      </tags>
  </entry>
</search>
